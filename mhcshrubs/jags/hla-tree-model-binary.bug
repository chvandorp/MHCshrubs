## JAGS model -- baseline hla-tree-model
##
## In this version, the dependent variable is binary.
## We use a logit-bernoulli model for the likelihood.
## This model can handle an arbitrary number of loci
##
## We accomplish this by concatenating the HLA frequency
## distributions e.g. p = (p_A, p_B, p_C).
## We then have to recover the right slice of this vector
## for inference of missing HLA alleles and HLA frequencies.
## The c-vectors with admissible HLAs are also concatenated,
## in addition to the vector beta of allele weights.

data {
    ## infer number of loci from length of H
    L <- length(H)

    ## auxiliary vector: H with a zero in front: required for Lidx definition
    ZH <- c(0,H)
    ## compute indices to select array slices corresponding to loci
    for ( ell in 1:length(H) ) { ## NB: unable to use L here for some reason
        Lidx[ell] <- sum(ZH[1:ell]) + 1 ## left-index for locus ell in concat vectors
        Ridx[ell] <- sum(H[1:ell]) ## right-index for locus ell in concat vectors
    }

    ## one1 and one2 are used to account for subject's HLAs when the HLA freqs are estimated
    ## (NB: in JAGS, nodes can only be defined once in the model block)
    for ( i in 1:N ) {
      for ( ell in 1:length(H) ) { ## NB: unable to use L here for some reason
        one1[i, ell] <- 1
        one2[i, ell] <- 1
      }
    }

    ## uninformed Dirichlet distribution...
    for ( h in 1:sum(H) ) { halves[h] <- 0.5 }

    ## precision for priors
    precision <- 1.0E-3
}

model {
    ## loop over the N patients
    for ( i in 1:N ) {
        log_like[i] <- log(dbin(Y[i], Q[i], 1)) ## used for WAIC: HACK: dbern not defined
        ## likelihood of observation Y, given predicted probability Q
        Y[i] ~ dbern(Q[i])
        ## the predicted probabiltiy is determined by the weights (beta) of the HLA alleles
        ## each participant has 2 alleles
        for ( ell in 1:L ) {
          betaSubject1[i, ell] <- beta[Lidx[ell]+hla1[i, ell]-1]
          betaSubject2[i, ell] <- beta[Lidx[ell]+hla2[i, ell]-1]
        }
        hlaEffect[i] <- sum(betaSubject1[i,]) + sum(betaSubject2[i,])
        Q[i] <- ilogit(alpha + hlaEffect[i] - meanHlaEffect) ## TODO: covariates

        ## missing HLA data. The vectors c1[,i], c2[,i] restrict the possible
        ## alleles for patient i. If the 4-digit allele is fully known, only one
        ## element of the vector is 1, otherwise, the vector contains multiple 1s
        for ( ell in 1:L ) {
          hla1[i, ell] ~ dcat(c1[Lidx[ell]:Ridx[ell], i])
          hla2[i, ell] ~ dcat(c2[Lidx[ell]:Ridx[ell], i])
        }

        ## likelihood of HLA distribution. Each participant contributes to the
        ## likelihood of the HLA distributions p
        for ( ell in 1:L ) {
          ## select the right slice of the p-vector, then get the right element
          one1[i, ell] ~ dbern(p[Lidx[ell]+hla1[i, ell]-1])
          one2[i, ell] ~ dbern(p[Lidx[ell]+hla2[i, ell]-1])
          ## one1 is mock "data" and always 1
        }
    }
    ## subtract "meanHlaEffect" from logit(Q[i])'s to de-correlate alpha with betas
    ## and get better precision for both.
    meanHlaEffect <- mean(hlaEffect)

    ## HLA frequency distribution
    for ( ell in 1:L ) {
      p[Lidx[ell]:Ridx[ell]] ~ ddirch(halves[Lidx[ell]:Ridx[ell]])
    }

    ## additional data to inform the frequency distributions.
    ## We use allele counts mA, mB and mC from Sub-Saharan Africa (SSA)
    ## to better estimate the Allele frequencies. NB: some alleles
    ## in the Durban cohort, have 0 frequency in the SSA sample. Therefore,
    ## we cannot use the SSA frequencies directly.
    for ( ell in 1:L ) {
      m[Lidx[ell]:Ridx[ell]] ~ dmulti(p[Lidx[ell]:Ridx[ell]], M[ell])
    }

    ## prior of the HLA effects. The baseline log-odds of the outcome
    alpha ~ dnorm(0.0, precision)

    ## prior on the weights of the nodes. The vector betaNodes contains
    ## the weights of the nodes of the HLA tree
    for ( k in 1:K ) {
        betaNodes[k] ~ dnorm(0.0, tau_beta)
    }
    ## precision of the node weight distribution
    tau_beta ~ dgamma(precision, precision)

    ## construct the leafs (beta) using NodeMatrix.
    ## the elements of e.g. the vector NodeMatrix[,h] are 0 if
    ## the node is in the path from the root to the leaf of the HLA allele h,
    ## and 0 otherwise
    for ( h in 1:sum(H) ) {
        beta[h] <- inprod(NodeMatrix[,h], lengthsEdgeToParent * betaNodes)
    }

    ## compute R^2 of the model. See the paper
    ## Gelman et al., R-squared for Bayesian regression models, 2017
    ## TODO: find the correct equivalent for binary observations: likelihood ratio R2?
    sdQ <- sd(Q) ## standard deviation of the "explained" part of the observation
    sdE <- sd(Y-Q) ## standard deviation of the error
    R2 <- sdQ * sdQ / (sdQ * sdQ + sdE + sdE) ## "alternative" R^2
}
